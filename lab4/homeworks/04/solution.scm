(define (prepend l value)
  (cond ((null? value) l)
        ((null? l) value)
        ((list? value) (cons (car value) (prepend l (cdr value))))
        (else (cons value l))))

(define (number->list n)
  (let loop ((number n)
             (digits '()))
    (if (< number 10)
        (cons number digits)
        (loop (quotient number 10)
              (cons (remainder number 10) digits)))))

(define (member? x l)
  (cond ((null? l) #f)
        ((equal? x (car l)) #t)
        (else (member? x (cdr l)))))

(define (distinct l)
  (let loop ((items l)
             (unique-items '()))
    (cond ((null? items) unique-items)
          ((not (member? (car items) unique-items)) (loop (cdr items) (append unique-items (list (car items)))))
          (else (loop (cdr items) unique-items)))))

(define (sequence-order? order l)
  (cond ((or (null? l) (null? (cdr l))) #t)
        ((order (car l) (cadr l)) (sequence-order? order (cdr l)))
        (else #f)))
